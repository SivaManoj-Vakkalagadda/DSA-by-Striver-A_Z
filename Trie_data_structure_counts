struct Node{
    Node* links[26];
    int cntEndWith = 0;
    int cntPrefix = 0;

    bool contains(char ch){
        return (links[ch-'a'] != nullptr);
    }

    void increaseEnd() {
        cntEndWith++;
    }
    void increasePrefix() {
        cntPrefix++;
    }    
    void decreaseEnd() {
        cntEndWith--;
    }
    void decreasePrefix() {
        cntPrefix--;
    }  

    Node* get(char ch){
        return links[ch-'a'];
    }

    void put(char ch, Node* node){
        links[ch-'a'] = node;
    }
    int getEnd(){
        return cntEndWith;
    }
    int getPrefix(){
        return cntPrefix;
    }
};

class Trie{
    private:
     Node* root;
    public:

    Trie(){
        
        root = new Node();
    }

    void insert(string &word){
        Node* temp = root;
        for(auto ch : word){
            if(!temp->contains(ch)){
                temp->put(ch,new Node());
            }
            temp = temp->get(ch);
            temp->increasePrefix();
        }
        temp->increaseEnd();
    }

    int countWordsEqualTo(string &word){
        Node* temp = root;
        for(auto ch : word){
            if(!temp->contains(ch)) return 0;
            temp = temp->get(ch);
        }
        return temp->getEnd();
    }

    int countWordsStartingWith(string &word){
        Node* temp = root;
        for(auto ch : word){
            if(!temp->contains(ch)) return 0;
            temp = temp->get(ch);
        }
        return temp->getPrefix();
    }

    void erase(string &word){
        Node* temp = root;
        for(auto ch : word){
            temp = temp->get(ch);
            temp->decreasePrefix();
        }
        temp->decreaseEnd();
    }
};
