// User function template for C++
struct Node{
    Node* links[26];
    bool flag = false;
    bool containsKey(char ch){
        return (links[ch-'a'] != nullptr);
    }
    void put(char ch, Node* node){
        links[ch-'a'] = node;
    }
    Node* get(char ch){
        return links[ch-'a'];
    }
    void setEnd(){
        flag = true;
    }
    bool isEnd(){
        return flag;
    }
};

class Trie {
    private:
    Node* root;
  public:

    Trie() {
        root = new Node();
    }
    // O(len)
    void insert(string &word) {
        // insert word into Trie
        Node* temp = root;
        for(char ch : word){
            if(!temp->containsKey(ch)){
                temp->put(ch,new Node());
            }
            temp = temp->get(ch);
        }
        temp->setEnd();
    }
    // O(len)
    bool search(string &word) {
        Node* temp = root;
        for(auto ch : word){
            if(!temp->containsKey(ch)) return false;
            temp = temp->get(ch);
        }
        return temp->isEnd();
    }
    // O(len)
    bool isPrefix(string &word) {
        // search prefix word in the Trie
        Node* temp = root;
        for(auto ch : word){
            if(!temp->containsKey(ch)) return false;
            temp = temp->get(ch);
        }
        return true;
    }
};
