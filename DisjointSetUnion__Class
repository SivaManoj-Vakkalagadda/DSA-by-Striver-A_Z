class DisJointSet {
  vector<int> rank, parent,size;
public:
  DisjointSet(int n){
    rank.resize(n+1,0);
    parent.resize(n+1); 
    size.resize(n+1);
    for(int i = 0 ; i <= n ; i++){
      parent[i] = i;
      size[i]=1;
    }
  }

  int findUPar(int node){
    if(parent[node] == node) return node;
    return parent[node] = findUPar(parent[node]);
  }

  void unionByRank(int u, int v){
    int ulp_u = findUPar(u);
    int ulp_v = findUPar(v);
    if(ulp_u == ulp_v) return;

    if(rank[ulp_u] < rank[ulp_v]){
      parent[ulp_u] = parent[ulp_v];
    }
    else if(rank[ulp_v] < rank[ulp_u]){
      parent[ulp_v] = parent[ulp_u];
    }
    else{
      parent[ulp_v] = ulp_u;
      rank[ulp_u]++;
  }
  void unionBySize(int u, int v){
    int ulp_u = findUPar(u);
    int ulp_v = findUPar(v);
    if(ulp_u == ulp_v) return;

    if(size[ulp_u] < size[ulp_v]){
      parent[ulp_u] = ulp_v;
      size[ulp_v] += size[ulp_u];
    }
    else{
      parent[ulp_v] = ulp_u;
      size[ulp_u] += size[ulp_v];
    }
}



// Using snippet by Rank

DisjointSet ds(n);
ds.unionByRank(a,b) // for all edges repeat it

if(ds.findUPar(a) == ds.findUPar(b)){
  cout << "Same" << endl;
}
else cout << "NotSame" << endl;


